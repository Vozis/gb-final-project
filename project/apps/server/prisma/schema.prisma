generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email       String  @unique
  isConfirmed Boolean @default(false)
  password    String  @db.VarChar(200)
  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  userName    String  @unique @map("user_name")
  avatarPath  String  @default("/assets/default-avatar.png") @map("avatar_path")
  role        Role[]

  hobbies Tag[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creations Event[] @relation("creations")
  events    Event[] @relation("events")
  favorites Event[] @relation("favorites")

  friends         User[] @relation("userFriends")
  friendsRelation User[] @relation("userFriends")

  blackList         User[] @relation("userBlocked")
  blackListRelation User[] @relation("userBlocked")

  comments Comment[]
  likes    Like[]

  exitDate      DateTime        @default(now()) @map("exit_date")
  notifications Notifications[]
  Rating        Rating[]

  // eventsList UsersOnEvents[]
  @@map("users")
}

model TypeTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  tag Tag[]

  @@map("type_tags")
}

model Tag {
  id        Int    @id @default(autoincrement())
  name      String
  shortName String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type   TypeTag @relation(fields: [typeId], references: [id])
  typeId Int     @default(1) @map("type_id")

  users  User[]
  events Event[]

  @@map("tags")
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String      @default("/assets/default-event.png") @map("image_url")
  coordinateX String?     @default("0") @map("coordinate_x")
  coordinateY String?     @default("0") @map("coordinate_y")
  eventTime   DateTime?   @default(dbgenerated("NOW() + interval '2 days'")) @map("event_time")
  peopleCount Int         @default(2) @map("people_count")
  status      EventStatus @default(OPEN)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tags             Tag[]
  users            User[] @relation("events")
  usersOfFavorites User[] @relation("favorites")

  creator   User? @relation("creations", fields: [creatorId], references: [id])
  creatorId Int?

  comments Comment[]
  Rating   Rating[]

  // usersList UsersOnEvents[]
  @@map("events")
}

model Comment {
  id       Int    @id @default(autoincrement())
  message  String @db.VarChar(1000)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  children Comment[] @relation("CommentReplies")
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?      @map("parent_id")

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  likes Like[]

  @@map("comments")
}

model Like {
  // id        Int     @id @default(autoincrement())
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int     @map("comment_id")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, commentId])
  @@map("likes")
}

model Notifications {
  id       Int                @id @default(autoincrement())
  type     NotificationType
  text     String?            @db.VarChar(1000)
  sourceId Int                @map("source_id")
  status   NotificationStatus @default(SENT)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model Rating {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
  rating  Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rating")
}

// model UsersOnEvents {
//   user       Users    @relation(fields: [userId], references: [id])
//   userId     Int // relation scalar field (used in the `@relation` attribute above)
//   event      Events   @relation(fields: [eventId], references: [id])
//   eventId    Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String
//
//   @@id([userId, eventId])
// }

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  COMMENT_REPLY
  COMMENT_CREATE
  EVENT_CREATE
  EVENT_UPDATE
  EVENT_COMPLETE
  EVENT_PARTICIPATE
  EVENT_LEAVE
  FRIEND_ADD
  FRIEND_REMOVE
}

enum NotificationStatus {
  SENT
  DELIVERED
  ERROR
}

enum EventStatus {
  OPEN
  CLOSED
  CANCELED
  ACTIVE
}
