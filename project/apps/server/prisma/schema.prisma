generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String   @db.VarChar(200)
  avatarPath    String   @default("/assets/default-avatar.png") @map("avatar_path")
  role          Role[]
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  userName      String   @unique @map("user_name")
  isConfirmed   Boolean  @default(false)
  exitDate      DateTime @default(now()) @map("exit_date")
  averageRating Float    @default(4.0) @map("average_rating")

  comments      Comment[]
  creations     Event[]         @relation("creations")
  likes         Like[]
  notifications Notifications[]

  userRatings   Rating[] @relation("user_ratings")
  authorRatings Rating[] @relation("author_ratings")

  hobbies           Tag[]   @relation("TagToUser")
  events            Event[] @relation("events")
  favorites         Event[] @relation("favorites")
  friends           User[]  @relation("userFriends")
  friendsRelation   User[]  @relation("userFriends")
  blackList         User[]  @relation("userBlocked")
  blackListRelation User[]  @relation("userBlocked")

  @@map("users")
}

model TypeTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tag Tag[]

  @@map("type_tags")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  shortName String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  typeId    Int      @default(1) @map("type_id")
  type      TypeTag  @relation(fields: [typeId], references: [id])
  events    Event[]  @relation("EventToTag")
  users     User[]   @relation("TagToUser")

  @@map("tags")
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String      @default("/assets/default-event.png") @map("image_url")
  coordinateX String?     @default("0") @map("coordinate_x")
  coordinateY String?     @default("0") @map("coordinate_y")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  creatorId   Int?
  eventTime   DateTime?   @default(dbgenerated("(now() + '2 days'::interval)")) @map("event_time")
  peopleCount Int         @default(2) @map("people_count")
  status      EventStatus @default(OPEN)
  comments    Comment[]
  creator     User?       @relation("creations", fields: [creatorId], references: [id])

  ratings Rating[]

  tags             Tag[]  @relation("EventToTag")
  users            User[] @relation("events")
  usersOfFavorites User[] @relation("favorites")

  @@map("events")
}

model Comment {
  id        Int       @id @default(autoincrement())
  message   String    @db.VarChar(1000)
  authorId  Int
  eventId   Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parentId  Int?      @map("parent_id")
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("CommentReplies")
  likes     Like[]

  @@map("comments")
}

model Like {
  commentId Int      @map("comment_id")
  userId    Int      @map("user")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@map("likes")
}

model Notifications {
  id        Int                @id @default(autoincrement())
  type      NotificationType
  sourceId  Int                @map("source_id")
  status    NotificationStatus @default(SENT)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  text      String?            @db.VarChar(1000)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@map("notifications")
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  user   User @relation("user_ratings", fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  author   User @relation("author_ratings", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  @@unique([eventId, userId], name: "compositeId")
  @@map("rating")
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  COMMENT_REPLY
  COMMENT_CREATE
  EVENT_CREATE
  EVENT_UPDATE
  EVENT_COMPLETE
  FRIEND_ADD
  FRIEND_REMOVE
  EVENT_PARTICIPATE
  EVENT_LEAVE
}

enum NotificationStatus {
  SENT
  DELIVERED
  ERROR
}

enum EventStatus {
  OPEN
  CLOSED
  CANCELED
  ACTIVE
}
